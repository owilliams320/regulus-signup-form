AWSTemplateFormatVersion: "2010-09-09"
Resources:
  SendEmailLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: src/handlers/send-email.handler
      Role: !GetAtt SendEmailLambdaExecutionRole.Arn
      Runtime: nodejs16.x

  SendEmailLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Path: '/service-roles/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowLambdaServiceToAssumeRole'
            Effect: 'Allow'
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - 'lambda.amazonaws.com'

  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: RegulusSignUp

  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: sendemail
      RestApiId: !Ref MyApiGateway

  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref MyApiGatewayResource
      RestApiId: !Ref MyApiGateway
      AuthorizationType: NONE
      Integration:
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - StatusCode: 200
        Type: AWS_PROXY
        Uri: !Sub
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendEmailLambda.Arn}/invocations"
          - SendEmailLambda: !Ref SendEmailLambda

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - MyApiGateway
    - SendEmailLambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendEmailLambda
      Principal: apigateway.amazonaws.com



